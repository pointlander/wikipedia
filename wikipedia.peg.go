package wikipedia

// Code generated by peg wikipedia.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulewiki
	ruleelement
	rulelink
	ruletext
	ruleheading1
	ruleheading2
	ruleheading3
	ruleheading4
	ruleheading5
	ruleheading6
	rulehr
	rulebr
	rulelist_content
	ruleulist
	ruleulist1
	ruleulist2
	ruleulist3
	ruleulist4
	ruleolist
	ruleolist1
	ruleolist2
	ruleolist3
	ruleolist4
	ruleend
	rulewild
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"wiki",
	"element",
	"link",
	"text",
	"heading1",
	"heading2",
	"heading3",
	"heading4",
	"heading5",
	"heading6",
	"hr",
	"br",
	"list_content",
	"ulist",
	"ulist1",
	"ulist2",
	"ulist3",
	"ulist4",
	"olist",
	"olist1",
	"olist2",
	"olist3",
	"olist4",
	"end",
	"wild",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Wikipedia struct {
	Buffer string
	buffer []rune
	rules  [27]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Wikipedia) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Wikipedia) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Wikipedia
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Wikipedia) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Wikipedia) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Wikipedia) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Wikipedia) Init(options ...func(*Wikipedia) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 wiki <- <element*> */
		func() bool {
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleelement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(rulewiki, position1)
			}
			return true
		},
		/* 1 element <- <(heading6 / heading5 / heading4 / heading3 / heading2 / heading1 / hr / br / ulist / olist / ('[' '[' link ('|' text)? (']' ']')) / wild)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleheading6]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading5]() {
						goto l8
					}
					goto l6
				l8:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading4]() {
						goto l9
					}
					goto l6
				l9:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading3]() {
						goto l10
					}
					goto l6
				l10:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading2]() {
						goto l11
					}
					goto l6
				l11:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading1]() {
						goto l12
					}
					goto l6
				l12:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulehr]() {
						goto l13
					}
					goto l6
				l13:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulebr]() {
						goto l14
					}
					goto l6
				l14:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleulist]() {
						goto l15
					}
					goto l6
				l15:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleolist]() {
						goto l16
					}
					goto l6
				l16:
					position, tokenIndex = position6, tokenIndex6
					if buffer[position] != rune('[') {
						goto l17
					}
					position++
					if buffer[position] != rune('[') {
						goto l17
					}
					position++
					if !_rules[rulelink]() {
						goto l17
					}
					{
						position18, tokenIndex18 := position, tokenIndex
						if buffer[position] != rune('|') {
							goto l18
						}
						position++
						if !_rules[ruletext]() {
							goto l18
						}
						goto l19
					l18:
						position, tokenIndex = position18, tokenIndex18
					}
				l19:
					if buffer[position] != rune(']') {
						goto l17
					}
					position++
					if buffer[position] != rune(']') {
						goto l17
					}
					position++
					goto l6
				l17:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulewild]() {
						goto l4
					}
				}
			l6:
				add(ruleelement, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 link <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position21 := position
			l22:
				{
					position23, tokenIndex23 := position, tokenIndex
					{
						position24, tokenIndex24 := position, tokenIndex
						{
							position25, tokenIndex25 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l26
							}
							position++
							goto l25
						l26:
							position, tokenIndex = position25, tokenIndex25
							if buffer[position] != rune(']') {
								goto l24
							}
							position++
							if buffer[position] != rune(']') {
								goto l24
							}
							position++
						}
					l25:
						goto l23
					l24:
						position, tokenIndex = position24, tokenIndex24
					}
					if !matchDot() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position23, tokenIndex23
				}
				add(rulelink, position21)
			}
			return true
		},
		/* 3 text <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position28 := position
			l29:
				{
					position30, tokenIndex30 := position, tokenIndex
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position32, tokenIndex32 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l33
							}
							position++
							goto l32
						l33:
							position, tokenIndex = position32, tokenIndex32
							if buffer[position] != rune(']') {
								goto l31
							}
							position++
							if buffer[position] != rune(']') {
								goto l31
							}
							position++
						}
					l32:
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if !matchDot() {
						goto l30
					}
					goto l29
				l30:
					position, tokenIndex = position30, tokenIndex30
				}
				add(ruletext, position28)
			}
			return true
		},
		/* 4 heading1 <- <('=' <(!'=' .)+> '=' end)> */
		func() bool {
			position34, tokenIndex34 := position, tokenIndex
			{
				position35 := position
				if buffer[position] != rune('=') {
					goto l34
				}
				position++
				{
					position36 := position
					{
						position39, tokenIndex39 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l39
						}
						position++
						goto l34
					l39:
						position, tokenIndex = position39, tokenIndex39
					}
					if !matchDot() {
						goto l34
					}
				l37:
					{
						position38, tokenIndex38 := position, tokenIndex
						{
							position40, tokenIndex40 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l40
							}
							position++
							goto l38
						l40:
							position, tokenIndex = position40, tokenIndex40
						}
						if !matchDot() {
							goto l38
						}
						goto l37
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
					add(rulePegText, position36)
				}
				if buffer[position] != rune('=') {
					goto l34
				}
				position++
				if !_rules[ruleend]() {
					goto l34
				}
				add(ruleheading1, position35)
			}
			return true
		l34:
			position, tokenIndex = position34, tokenIndex34
			return false
		},
		/* 5 heading2 <- <('=' '=' <(!('=' '=') .)+> ('=' '=') end)> */
		func() bool {
			position41, tokenIndex41 := position, tokenIndex
			{
				position42 := position
				if buffer[position] != rune('=') {
					goto l41
				}
				position++
				if buffer[position] != rune('=') {
					goto l41
				}
				position++
				{
					position43 := position
					{
						position46, tokenIndex46 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l46
						}
						position++
						if buffer[position] != rune('=') {
							goto l46
						}
						position++
						goto l41
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					if !matchDot() {
						goto l41
					}
				l44:
					{
						position45, tokenIndex45 := position, tokenIndex
						{
							position47, tokenIndex47 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l47
							}
							position++
							if buffer[position] != rune('=') {
								goto l47
							}
							position++
							goto l45
						l47:
							position, tokenIndex = position47, tokenIndex47
						}
						if !matchDot() {
							goto l45
						}
						goto l44
					l45:
						position, tokenIndex = position45, tokenIndex45
					}
					add(rulePegText, position43)
				}
				if buffer[position] != rune('=') {
					goto l41
				}
				position++
				if buffer[position] != rune('=') {
					goto l41
				}
				position++
				if !_rules[ruleend]() {
					goto l41
				}
				add(ruleheading2, position42)
			}
			return true
		l41:
			position, tokenIndex = position41, tokenIndex41
			return false
		},
		/* 6 heading3 <- <('=' '=' '=' <(!('=' '=' '=') .)+> ('=' '=' '=') end)> */
		func() bool {
			position48, tokenIndex48 := position, tokenIndex
			{
				position49 := position
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				{
					position50 := position
					{
						position53, tokenIndex53 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l53
						}
						position++
						if buffer[position] != rune('=') {
							goto l53
						}
						position++
						if buffer[position] != rune('=') {
							goto l53
						}
						position++
						goto l48
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
					if !matchDot() {
						goto l48
					}
				l51:
					{
						position52, tokenIndex52 := position, tokenIndex
						{
							position54, tokenIndex54 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l54
							}
							position++
							if buffer[position] != rune('=') {
								goto l54
							}
							position++
							if buffer[position] != rune('=') {
								goto l54
							}
							position++
							goto l52
						l54:
							position, tokenIndex = position54, tokenIndex54
						}
						if !matchDot() {
							goto l52
						}
						goto l51
					l52:
						position, tokenIndex = position52, tokenIndex52
					}
					add(rulePegText, position50)
				}
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if buffer[position] != rune('=') {
					goto l48
				}
				position++
				if !_rules[ruleend]() {
					goto l48
				}
				add(ruleheading3, position49)
			}
			return true
		l48:
			position, tokenIndex = position48, tokenIndex48
			return false
		},
		/* 7 heading4 <- <('=' '=' '=' '=' <(!('=' '=' '=' '=') .)+> ('=' '=' '=' '=') end)> */
		func() bool {
			position55, tokenIndex55 := position, tokenIndex
			{
				position56 := position
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				{
					position57 := position
					{
						position60, tokenIndex60 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l60
						}
						position++
						if buffer[position] != rune('=') {
							goto l60
						}
						position++
						if buffer[position] != rune('=') {
							goto l60
						}
						position++
						if buffer[position] != rune('=') {
							goto l60
						}
						position++
						goto l55
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
					if !matchDot() {
						goto l55
					}
				l58:
					{
						position59, tokenIndex59 := position, tokenIndex
						{
							position61, tokenIndex61 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l61
							}
							position++
							if buffer[position] != rune('=') {
								goto l61
							}
							position++
							if buffer[position] != rune('=') {
								goto l61
							}
							position++
							if buffer[position] != rune('=') {
								goto l61
							}
							position++
							goto l59
						l61:
							position, tokenIndex = position61, tokenIndex61
						}
						if !matchDot() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position59, tokenIndex59
					}
					add(rulePegText, position57)
				}
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if buffer[position] != rune('=') {
					goto l55
				}
				position++
				if !_rules[ruleend]() {
					goto l55
				}
				add(ruleheading4, position56)
			}
			return true
		l55:
			position, tokenIndex = position55, tokenIndex55
			return false
		},
		/* 8 heading5 <- <('=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=') end)> */
		func() bool {
			position62, tokenIndex62 := position, tokenIndex
			{
				position63 := position
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				{
					position64 := position
					{
						position67, tokenIndex67 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l67
						}
						position++
						if buffer[position] != rune('=') {
							goto l67
						}
						position++
						if buffer[position] != rune('=') {
							goto l67
						}
						position++
						if buffer[position] != rune('=') {
							goto l67
						}
						position++
						if buffer[position] != rune('=') {
							goto l67
						}
						position++
						goto l62
					l67:
						position, tokenIndex = position67, tokenIndex67
					}
					if !matchDot() {
						goto l62
					}
				l65:
					{
						position66, tokenIndex66 := position, tokenIndex
						{
							position68, tokenIndex68 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l68
							}
							position++
							if buffer[position] != rune('=') {
								goto l68
							}
							position++
							if buffer[position] != rune('=') {
								goto l68
							}
							position++
							if buffer[position] != rune('=') {
								goto l68
							}
							position++
							if buffer[position] != rune('=') {
								goto l68
							}
							position++
							goto l66
						l68:
							position, tokenIndex = position68, tokenIndex68
						}
						if !matchDot() {
							goto l66
						}
						goto l65
					l66:
						position, tokenIndex = position66, tokenIndex66
					}
					add(rulePegText, position64)
				}
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if buffer[position] != rune('=') {
					goto l62
				}
				position++
				if !_rules[ruleend]() {
					goto l62
				}
				add(ruleheading5, position63)
			}
			return true
		l62:
			position, tokenIndex = position62, tokenIndex62
			return false
		},
		/* 9 heading6 <- <('=' '=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=' '=') end)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				{
					position71 := position
					{
						position74, tokenIndex74 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						if buffer[position] != rune('=') {
							goto l74
						}
						position++
						goto l69
					l74:
						position, tokenIndex = position74, tokenIndex74
					}
					if !matchDot() {
						goto l69
					}
				l72:
					{
						position73, tokenIndex73 := position, tokenIndex
						{
							position75, tokenIndex75 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							if buffer[position] != rune('=') {
								goto l75
							}
							position++
							goto l73
						l75:
							position, tokenIndex = position75, tokenIndex75
						}
						if !matchDot() {
							goto l73
						}
						goto l72
					l73:
						position, tokenIndex = position73, tokenIndex73
					}
					add(rulePegText, position71)
				}
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if buffer[position] != rune('=') {
					goto l69
				}
				position++
				if !_rules[ruleend]() {
					goto l69
				}
				add(ruleheading6, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 10 hr <- <('-' '-' '-' '-' end)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				if buffer[position] != rune('-') {
					goto l76
				}
				position++
				if buffer[position] != rune('-') {
					goto l76
				}
				position++
				if buffer[position] != rune('-') {
					goto l76
				}
				position++
				if buffer[position] != rune('-') {
					goto l76
				}
				position++
				if !_rules[ruleend]() {
					goto l76
				}
				add(rulehr, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 11 br <- <(end end)> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				if !_rules[ruleend]() {
					goto l78
				}
				if !_rules[ruleend]() {
					goto l78
				}
				add(rulebr, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 12 list_content <- <(('[' '[' link ('|' text)? (']' ']')) / .)> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('[') {
						goto l83
					}
					position++
					if buffer[position] != rune('[') {
						goto l83
					}
					position++
					if !_rules[rulelink]() {
						goto l83
					}
					{
						position84, tokenIndex84 := position, tokenIndex
						if buffer[position] != rune('|') {
							goto l84
						}
						position++
						if !_rules[ruletext]() {
							goto l84
						}
						goto l85
					l84:
						position, tokenIndex = position84, tokenIndex84
					}
				l85:
					if buffer[position] != rune(']') {
						goto l83
					}
					position++
					if buffer[position] != rune(']') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if !matchDot() {
						goto l80
					}
				}
			l82:
				add(rulelist_content, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 13 ulist <- <(ulist4 / ulist3 / ulist2 / ulist1)+> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				{
					position90, tokenIndex90 := position, tokenIndex
					if !_rules[ruleulist4]() {
						goto l91
					}
					goto l90
				l91:
					position, tokenIndex = position90, tokenIndex90
					if !_rules[ruleulist3]() {
						goto l92
					}
					goto l90
				l92:
					position, tokenIndex = position90, tokenIndex90
					if !_rules[ruleulist2]() {
						goto l93
					}
					goto l90
				l93:
					position, tokenIndex = position90, tokenIndex90
					if !_rules[ruleulist1]() {
						goto l86
					}
				}
			l90:
			l88:
				{
					position89, tokenIndex89 := position, tokenIndex
					{
						position94, tokenIndex94 := position, tokenIndex
						if !_rules[ruleulist4]() {
							goto l95
						}
						goto l94
					l95:
						position, tokenIndex = position94, tokenIndex94
						if !_rules[ruleulist3]() {
							goto l96
						}
						goto l94
					l96:
						position, tokenIndex = position94, tokenIndex94
						if !_rules[ruleulist2]() {
							goto l97
						}
						goto l94
					l97:
						position, tokenIndex = position94, tokenIndex94
						if !_rules[ruleulist1]() {
							goto l89
						}
					}
				l94:
					goto l88
				l89:
					position, tokenIndex = position89, tokenIndex89
				}
				add(ruleulist, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 14 ulist1 <- <('*' ' ' (!end list_content)* end)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if buffer[position] != rune('*') {
					goto l98
				}
				position++
				if buffer[position] != rune(' ') {
					goto l98
				}
				position++
			l100:
				{
					position101, tokenIndex101 := position, tokenIndex
					{
						position102, tokenIndex102 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l102
						}
						goto l101
					l102:
						position, tokenIndex = position102, tokenIndex102
					}
					if !_rules[rulelist_content]() {
						goto l101
					}
					goto l100
				l101:
					position, tokenIndex = position101, tokenIndex101
				}
				if !_rules[ruleend]() {
					goto l98
				}
				add(ruleulist1, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 15 ulist2 <- <('*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if buffer[position] != rune('*') {
					goto l103
				}
				position++
				if buffer[position] != rune('*') {
					goto l103
				}
				position++
				if buffer[position] != rune(' ') {
					goto l103
				}
				position++
			l105:
				{
					position106, tokenIndex106 := position, tokenIndex
					{
						position107, tokenIndex107 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l107
						}
						goto l106
					l107:
						position, tokenIndex = position107, tokenIndex107
					}
					if !_rules[rulelist_content]() {
						goto l106
					}
					goto l105
				l106:
					position, tokenIndex = position106, tokenIndex106
				}
				if !_rules[ruleend]() {
					goto l103
				}
				add(ruleulist2, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 16 ulist3 <- <('*' '*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('*') {
					goto l108
				}
				position++
				if buffer[position] != rune('*') {
					goto l108
				}
				position++
				if buffer[position] != rune('*') {
					goto l108
				}
				position++
				if buffer[position] != rune(' ') {
					goto l108
				}
				position++
			l110:
				{
					position111, tokenIndex111 := position, tokenIndex
					{
						position112, tokenIndex112 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l112
						}
						goto l111
					l112:
						position, tokenIndex = position112, tokenIndex112
					}
					if !_rules[rulelist_content]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position111, tokenIndex111
				}
				if !_rules[ruleend]() {
					goto l108
				}
				add(ruleulist3, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 17 ulist4 <- <('*' '*' '*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position113, tokenIndex113 := position, tokenIndex
			{
				position114 := position
				if buffer[position] != rune('*') {
					goto l113
				}
				position++
				if buffer[position] != rune('*') {
					goto l113
				}
				position++
				if buffer[position] != rune('*') {
					goto l113
				}
				position++
				if buffer[position] != rune('*') {
					goto l113
				}
				position++
				if buffer[position] != rune(' ') {
					goto l113
				}
				position++
			l115:
				{
					position116, tokenIndex116 := position, tokenIndex
					{
						position117, tokenIndex117 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l117
						}
						goto l116
					l117:
						position, tokenIndex = position117, tokenIndex117
					}
					if !_rules[rulelist_content]() {
						goto l116
					}
					goto l115
				l116:
					position, tokenIndex = position116, tokenIndex116
				}
				if !_rules[ruleend]() {
					goto l113
				}
				add(ruleulist4, position114)
			}
			return true
		l113:
			position, tokenIndex = position113, tokenIndex113
			return false
		},
		/* 18 olist <- <(olist4 / olist3 / olist2 / olist1)+> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				{
					position122, tokenIndex122 := position, tokenIndex
					if !_rules[ruleolist4]() {
						goto l123
					}
					goto l122
				l123:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleolist3]() {
						goto l124
					}
					goto l122
				l124:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleolist2]() {
						goto l125
					}
					goto l122
				l125:
					position, tokenIndex = position122, tokenIndex122
					if !_rules[ruleolist1]() {
						goto l118
					}
				}
			l122:
			l120:
				{
					position121, tokenIndex121 := position, tokenIndex
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[ruleolist4]() {
							goto l127
						}
						goto l126
					l127:
						position, tokenIndex = position126, tokenIndex126
						if !_rules[ruleolist3]() {
							goto l128
						}
						goto l126
					l128:
						position, tokenIndex = position126, tokenIndex126
						if !_rules[ruleolist2]() {
							goto l129
						}
						goto l126
					l129:
						position, tokenIndex = position126, tokenIndex126
						if !_rules[ruleolist1]() {
							goto l121
						}
					}
				l126:
					goto l120
				l121:
					position, tokenIndex = position121, tokenIndex121
				}
				add(ruleolist, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 19 olist1 <- <('#' ' ' (!end list_content)* end)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if buffer[position] != rune('#') {
					goto l130
				}
				position++
				if buffer[position] != rune(' ') {
					goto l130
				}
				position++
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					{
						position134, tokenIndex134 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l134
						}
						goto l133
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
					if !_rules[rulelist_content]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				if !_rules[ruleend]() {
					goto l130
				}
				add(ruleolist1, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 20 olist2 <- <('#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if buffer[position] != rune('#') {
					goto l135
				}
				position++
				if buffer[position] != rune('#') {
					goto l135
				}
				position++
				if buffer[position] != rune(' ') {
					goto l135
				}
				position++
			l137:
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l139
						}
						goto l138
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
					if !_rules[rulelist_content]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				if !_rules[ruleend]() {
					goto l135
				}
				add(ruleolist2, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 21 olist3 <- <('#' '#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if buffer[position] != rune('#') {
					goto l140
				}
				position++
				if buffer[position] != rune('#') {
					goto l140
				}
				position++
				if buffer[position] != rune('#') {
					goto l140
				}
				position++
				if buffer[position] != rune(' ') {
					goto l140
				}
				position++
			l142:
				{
					position143, tokenIndex143 := position, tokenIndex
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l144
						}
						goto l143
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
					if !_rules[rulelist_content]() {
						goto l143
					}
					goto l142
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
				if !_rules[ruleend]() {
					goto l140
				}
				add(ruleolist3, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 22 olist4 <- <('#' '#' '#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if buffer[position] != rune('#') {
					goto l145
				}
				position++
				if buffer[position] != rune('#') {
					goto l145
				}
				position++
				if buffer[position] != rune('#') {
					goto l145
				}
				position++
				if buffer[position] != rune('#') {
					goto l145
				}
				position++
				if buffer[position] != rune(' ') {
					goto l145
				}
				position++
			l147:
				{
					position148, tokenIndex148 := position, tokenIndex
					{
						position149, tokenIndex149 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l149
						}
						goto l148
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
					if !_rules[rulelist_content]() {
						goto l148
					}
					goto l147
				l148:
					position, tokenIndex = position148, tokenIndex148
				}
				if !_rules[ruleend]() {
					goto l145
				}
				add(ruleolist4, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 23 end <- <('\n' / ('\r' '\n'))> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				{
					position152, tokenIndex152 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l153
					}
					position++
					goto l152
				l153:
					position, tokenIndex = position152, tokenIndex152
					if buffer[position] != rune('\r') {
						goto l150
					}
					position++
					if buffer[position] != rune('\n') {
						goto l150
					}
					position++
				}
			l152:
				add(ruleend, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 24 wild <- <.> */
		func() bool {
			position154, tokenIndex154 := position, tokenIndex
			{
				position155 := position
				if !matchDot() {
					goto l154
				}
				add(rulewild, position155)
			}
			return true
		l154:
			position, tokenIndex = position154, tokenIndex154
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
