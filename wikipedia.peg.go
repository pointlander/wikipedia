package wikipedia

// Code generated by peg wikipedia.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulewiki
	ruleelement
	rulelink
	ruletext
	ruleheading1
	ruleheading2
	ruleheading3
	ruleheading4
	ruleheading5
	ruleheading6
	rulehr
	rulebr
	rulelist_content
	ruleulist1
	ruleulist2
	ruleulist3
	ruleulist4
	ruleolist1
	ruleolist2
	ruleolist3
	ruleolist4
	ruleend
	rulewild
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"wiki",
	"element",
	"link",
	"text",
	"heading1",
	"heading2",
	"heading3",
	"heading4",
	"heading5",
	"heading6",
	"hr",
	"br",
	"list_content",
	"ulist1",
	"ulist2",
	"ulist3",
	"ulist4",
	"olist1",
	"olist2",
	"olist3",
	"olist4",
	"end",
	"wild",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Wikipedia struct {
	Buffer string
	buffer []rune
	rules  [25]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Wikipedia) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Wikipedia) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Wikipedia
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Wikipedia) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Wikipedia) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Wikipedia) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Wikipedia) Init(options ...func(*Wikipedia) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 wiki <- <element*> */
		func() bool {
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleelement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(rulewiki, position1)
			}
			return true
		},
		/* 1 element <- <(heading6 / heading5 / heading4 / heading3 / heading2 / heading1 / hr / br / ulist4 / ulist3 / ulist2 / ulist1 / olist4 / olist3 / olist2 / olist1 / ('[' '[' link ('|' text)? (']' ']')) / wild)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleheading6]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading5]() {
						goto l8
					}
					goto l6
				l8:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading4]() {
						goto l9
					}
					goto l6
				l9:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading3]() {
						goto l10
					}
					goto l6
				l10:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading2]() {
						goto l11
					}
					goto l6
				l11:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading1]() {
						goto l12
					}
					goto l6
				l12:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulehr]() {
						goto l13
					}
					goto l6
				l13:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulebr]() {
						goto l14
					}
					goto l6
				l14:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleulist4]() {
						goto l15
					}
					goto l6
				l15:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleulist3]() {
						goto l16
					}
					goto l6
				l16:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleulist2]() {
						goto l17
					}
					goto l6
				l17:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleulist1]() {
						goto l18
					}
					goto l6
				l18:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleolist4]() {
						goto l19
					}
					goto l6
				l19:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleolist3]() {
						goto l20
					}
					goto l6
				l20:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleolist2]() {
						goto l21
					}
					goto l6
				l21:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleolist1]() {
						goto l22
					}
					goto l6
				l22:
					position, tokenIndex = position6, tokenIndex6
					if buffer[position] != rune('[') {
						goto l23
					}
					position++
					if buffer[position] != rune('[') {
						goto l23
					}
					position++
					if !_rules[rulelink]() {
						goto l23
					}
					{
						position24, tokenIndex24 := position, tokenIndex
						if buffer[position] != rune('|') {
							goto l24
						}
						position++
						if !_rules[ruletext]() {
							goto l24
						}
						goto l25
					l24:
						position, tokenIndex = position24, tokenIndex24
					}
				l25:
					if buffer[position] != rune(']') {
						goto l23
					}
					position++
					if buffer[position] != rune(']') {
						goto l23
					}
					position++
					goto l6
				l23:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulewild]() {
						goto l4
					}
				}
			l6:
				add(ruleelement, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 link <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position27 := position
			l28:
				{
					position29, tokenIndex29 := position, tokenIndex
					{
						position30, tokenIndex30 := position, tokenIndex
						{
							position31, tokenIndex31 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l32
							}
							position++
							goto l31
						l32:
							position, tokenIndex = position31, tokenIndex31
							if buffer[position] != rune(']') {
								goto l30
							}
							position++
							if buffer[position] != rune(']') {
								goto l30
							}
							position++
						}
					l31:
						goto l29
					l30:
						position, tokenIndex = position30, tokenIndex30
					}
					if !matchDot() {
						goto l29
					}
					goto l28
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
				add(rulelink, position27)
			}
			return true
		},
		/* 3 text <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position34 := position
			l35:
				{
					position36, tokenIndex36 := position, tokenIndex
					{
						position37, tokenIndex37 := position, tokenIndex
						{
							position38, tokenIndex38 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l39
							}
							position++
							goto l38
						l39:
							position, tokenIndex = position38, tokenIndex38
							if buffer[position] != rune(']') {
								goto l37
							}
							position++
							if buffer[position] != rune(']') {
								goto l37
							}
							position++
						}
					l38:
						goto l36
					l37:
						position, tokenIndex = position37, tokenIndex37
					}
					if !matchDot() {
						goto l36
					}
					goto l35
				l36:
					position, tokenIndex = position36, tokenIndex36
				}
				add(ruletext, position34)
			}
			return true
		},
		/* 4 heading1 <- <('=' <(!'=' .)+> '=' end)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				if buffer[position] != rune('=') {
					goto l40
				}
				position++
				{
					position42 := position
					{
						position45, tokenIndex45 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l45
						}
						position++
						goto l40
					l45:
						position, tokenIndex = position45, tokenIndex45
					}
					if !matchDot() {
						goto l40
					}
				l43:
					{
						position44, tokenIndex44 := position, tokenIndex
						{
							position46, tokenIndex46 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l46
							}
							position++
							goto l44
						l46:
							position, tokenIndex = position46, tokenIndex46
						}
						if !matchDot() {
							goto l44
						}
						goto l43
					l44:
						position, tokenIndex = position44, tokenIndex44
					}
					add(rulePegText, position42)
				}
				if buffer[position] != rune('=') {
					goto l40
				}
				position++
				if !_rules[ruleend]() {
					goto l40
				}
				add(ruleheading1, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 5 heading2 <- <('=' '=' <(!('=' '=') .)+> ('=' '=') end)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				if buffer[position] != rune('=') {
					goto l47
				}
				position++
				if buffer[position] != rune('=') {
					goto l47
				}
				position++
				{
					position49 := position
					{
						position52, tokenIndex52 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l52
						}
						position++
						if buffer[position] != rune('=') {
							goto l52
						}
						position++
						goto l47
					l52:
						position, tokenIndex = position52, tokenIndex52
					}
					if !matchDot() {
						goto l47
					}
				l50:
					{
						position51, tokenIndex51 := position, tokenIndex
						{
							position53, tokenIndex53 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l53
							}
							position++
							if buffer[position] != rune('=') {
								goto l53
							}
							position++
							goto l51
						l53:
							position, tokenIndex = position53, tokenIndex53
						}
						if !matchDot() {
							goto l51
						}
						goto l50
					l51:
						position, tokenIndex = position51, tokenIndex51
					}
					add(rulePegText, position49)
				}
				if buffer[position] != rune('=') {
					goto l47
				}
				position++
				if buffer[position] != rune('=') {
					goto l47
				}
				position++
				if !_rules[ruleend]() {
					goto l47
				}
				add(ruleheading2, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 6 heading3 <- <('=' '=' '=' <(!('=' '=' '=') .)+> ('=' '=' '=') end)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				{
					position56 := position
					{
						position59, tokenIndex59 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l59
						}
						position++
						if buffer[position] != rune('=') {
							goto l59
						}
						position++
						if buffer[position] != rune('=') {
							goto l59
						}
						position++
						goto l54
					l59:
						position, tokenIndex = position59, tokenIndex59
					}
					if !matchDot() {
						goto l54
					}
				l57:
					{
						position58, tokenIndex58 := position, tokenIndex
						{
							position60, tokenIndex60 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l60
							}
							position++
							if buffer[position] != rune('=') {
								goto l60
							}
							position++
							if buffer[position] != rune('=') {
								goto l60
							}
							position++
							goto l58
						l60:
							position, tokenIndex = position60, tokenIndex60
						}
						if !matchDot() {
							goto l58
						}
						goto l57
					l58:
						position, tokenIndex = position58, tokenIndex58
					}
					add(rulePegText, position56)
				}
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				if buffer[position] != rune('=') {
					goto l54
				}
				position++
				if !_rules[ruleend]() {
					goto l54
				}
				add(ruleheading3, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 7 heading4 <- <('=' '=' '=' '=' <(!('=' '=' '=' '=') .)+> ('=' '=' '=' '=') end)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				{
					position63 := position
					{
						position66, tokenIndex66 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l66
						}
						position++
						if buffer[position] != rune('=') {
							goto l66
						}
						position++
						if buffer[position] != rune('=') {
							goto l66
						}
						position++
						if buffer[position] != rune('=') {
							goto l66
						}
						position++
						goto l61
					l66:
						position, tokenIndex = position66, tokenIndex66
					}
					if !matchDot() {
						goto l61
					}
				l64:
					{
						position65, tokenIndex65 := position, tokenIndex
						{
							position67, tokenIndex67 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l67
							}
							position++
							if buffer[position] != rune('=') {
								goto l67
							}
							position++
							if buffer[position] != rune('=') {
								goto l67
							}
							position++
							if buffer[position] != rune('=') {
								goto l67
							}
							position++
							goto l65
						l67:
							position, tokenIndex = position67, tokenIndex67
						}
						if !matchDot() {
							goto l65
						}
						goto l64
					l65:
						position, tokenIndex = position65, tokenIndex65
					}
					add(rulePegText, position63)
				}
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if buffer[position] != rune('=') {
					goto l61
				}
				position++
				if !_rules[ruleend]() {
					goto l61
				}
				add(ruleheading4, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 8 heading5 <- <('=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=') end)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				{
					position70 := position
					{
						position73, tokenIndex73 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l73
						}
						position++
						if buffer[position] != rune('=') {
							goto l73
						}
						position++
						if buffer[position] != rune('=') {
							goto l73
						}
						position++
						if buffer[position] != rune('=') {
							goto l73
						}
						position++
						if buffer[position] != rune('=') {
							goto l73
						}
						position++
						goto l68
					l73:
						position, tokenIndex = position73, tokenIndex73
					}
					if !matchDot() {
						goto l68
					}
				l71:
					{
						position72, tokenIndex72 := position, tokenIndex
						{
							position74, tokenIndex74 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
							if buffer[position] != rune('=') {
								goto l74
							}
							position++
							goto l72
						l74:
							position, tokenIndex = position74, tokenIndex74
						}
						if !matchDot() {
							goto l72
						}
						goto l71
					l72:
						position, tokenIndex = position72, tokenIndex72
					}
					add(rulePegText, position70)
				}
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if buffer[position] != rune('=') {
					goto l68
				}
				position++
				if !_rules[ruleend]() {
					goto l68
				}
				add(ruleheading5, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 9 heading6 <- <('=' '=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=' '=') end)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				{
					position77 := position
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						if buffer[position] != rune('=') {
							goto l80
						}
						position++
						goto l75
					l80:
						position, tokenIndex = position80, tokenIndex80
					}
					if !matchDot() {
						goto l75
					}
				l78:
					{
						position79, tokenIndex79 := position, tokenIndex
						{
							position81, tokenIndex81 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							if buffer[position] != rune('=') {
								goto l81
							}
							position++
							goto l79
						l81:
							position, tokenIndex = position81, tokenIndex81
						}
						if !matchDot() {
							goto l79
						}
						goto l78
					l79:
						position, tokenIndex = position79, tokenIndex79
					}
					add(rulePegText, position77)
				}
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if buffer[position] != rune('=') {
					goto l75
				}
				position++
				if !_rules[ruleend]() {
					goto l75
				}
				add(ruleheading6, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 10 hr <- <('-' '-' '-' '-' end)> */
		func() bool {
			position82, tokenIndex82 := position, tokenIndex
			{
				position83 := position
				if buffer[position] != rune('-') {
					goto l82
				}
				position++
				if buffer[position] != rune('-') {
					goto l82
				}
				position++
				if buffer[position] != rune('-') {
					goto l82
				}
				position++
				if buffer[position] != rune('-') {
					goto l82
				}
				position++
				if !_rules[ruleend]() {
					goto l82
				}
				add(rulehr, position83)
			}
			return true
		l82:
			position, tokenIndex = position82, tokenIndex82
			return false
		},
		/* 11 br <- <(end end)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[ruleend]() {
					goto l84
				}
				if !_rules[ruleend]() {
					goto l84
				}
				add(rulebr, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 12 list_content <- <(('[' '[' link ('|' text)? (']' ']')) / .)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				{
					position88, tokenIndex88 := position, tokenIndex
					if buffer[position] != rune('[') {
						goto l89
					}
					position++
					if buffer[position] != rune('[') {
						goto l89
					}
					position++
					if !_rules[rulelink]() {
						goto l89
					}
					{
						position90, tokenIndex90 := position, tokenIndex
						if buffer[position] != rune('|') {
							goto l90
						}
						position++
						if !_rules[ruletext]() {
							goto l90
						}
						goto l91
					l90:
						position, tokenIndex = position90, tokenIndex90
					}
				l91:
					if buffer[position] != rune(']') {
						goto l89
					}
					position++
					if buffer[position] != rune(']') {
						goto l89
					}
					position++
					goto l88
				l89:
					position, tokenIndex = position88, tokenIndex88
					if !matchDot() {
						goto l86
					}
				}
			l88:
				add(rulelist_content, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 13 ulist1 <- <('*' ' ' (!end list_content)* end)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('*') {
					goto l92
				}
				position++
				if buffer[position] != rune(' ') {
					goto l92
				}
				position++
			l94:
				{
					position95, tokenIndex95 := position, tokenIndex
					{
						position96, tokenIndex96 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l96
						}
						goto l95
					l96:
						position, tokenIndex = position96, tokenIndex96
					}
					if !_rules[rulelist_content]() {
						goto l95
					}
					goto l94
				l95:
					position, tokenIndex = position95, tokenIndex95
				}
				if !_rules[ruleend]() {
					goto l92
				}
				add(ruleulist1, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 14 ulist2 <- <('*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				if buffer[position] != rune('*') {
					goto l97
				}
				position++
				if buffer[position] != rune('*') {
					goto l97
				}
				position++
				if buffer[position] != rune(' ') {
					goto l97
				}
				position++
			l99:
				{
					position100, tokenIndex100 := position, tokenIndex
					{
						position101, tokenIndex101 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l101
						}
						goto l100
					l101:
						position, tokenIndex = position101, tokenIndex101
					}
					if !_rules[rulelist_content]() {
						goto l100
					}
					goto l99
				l100:
					position, tokenIndex = position100, tokenIndex100
				}
				if !_rules[ruleend]() {
					goto l97
				}
				add(ruleulist2, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 15 ulist3 <- <('*' '*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if buffer[position] != rune('*') {
					goto l102
				}
				position++
				if buffer[position] != rune('*') {
					goto l102
				}
				position++
				if buffer[position] != rune('*') {
					goto l102
				}
				position++
				if buffer[position] != rune(' ') {
					goto l102
				}
				position++
			l104:
				{
					position105, tokenIndex105 := position, tokenIndex
					{
						position106, tokenIndex106 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l106
						}
						goto l105
					l106:
						position, tokenIndex = position106, tokenIndex106
					}
					if !_rules[rulelist_content]() {
						goto l105
					}
					goto l104
				l105:
					position, tokenIndex = position105, tokenIndex105
				}
				if !_rules[ruleend]() {
					goto l102
				}
				add(ruleulist3, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 16 ulist4 <- <('*' '*' '*' '*' ' ' (!end list_content)* end)> */
		func() bool {
			position107, tokenIndex107 := position, tokenIndex
			{
				position108 := position
				if buffer[position] != rune('*') {
					goto l107
				}
				position++
				if buffer[position] != rune('*') {
					goto l107
				}
				position++
				if buffer[position] != rune('*') {
					goto l107
				}
				position++
				if buffer[position] != rune('*') {
					goto l107
				}
				position++
				if buffer[position] != rune(' ') {
					goto l107
				}
				position++
			l109:
				{
					position110, tokenIndex110 := position, tokenIndex
					{
						position111, tokenIndex111 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l111
						}
						goto l110
					l111:
						position, tokenIndex = position111, tokenIndex111
					}
					if !_rules[rulelist_content]() {
						goto l110
					}
					goto l109
				l110:
					position, tokenIndex = position110, tokenIndex110
				}
				if !_rules[ruleend]() {
					goto l107
				}
				add(ruleulist4, position108)
			}
			return true
		l107:
			position, tokenIndex = position107, tokenIndex107
			return false
		},
		/* 17 olist1 <- <('#' ' ' (!end list_content)* end)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if buffer[position] != rune('#') {
					goto l112
				}
				position++
				if buffer[position] != rune(' ') {
					goto l112
				}
				position++
			l114:
				{
					position115, tokenIndex115 := position, tokenIndex
					{
						position116, tokenIndex116 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l116
						}
						goto l115
					l116:
						position, tokenIndex = position116, tokenIndex116
					}
					if !_rules[rulelist_content]() {
						goto l115
					}
					goto l114
				l115:
					position, tokenIndex = position115, tokenIndex115
				}
				if !_rules[ruleend]() {
					goto l112
				}
				add(ruleolist1, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 18 olist2 <- <('#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position117, tokenIndex117 := position, tokenIndex
			{
				position118 := position
				if buffer[position] != rune('#') {
					goto l117
				}
				position++
				if buffer[position] != rune('#') {
					goto l117
				}
				position++
				if buffer[position] != rune(' ') {
					goto l117
				}
				position++
			l119:
				{
					position120, tokenIndex120 := position, tokenIndex
					{
						position121, tokenIndex121 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l121
						}
						goto l120
					l121:
						position, tokenIndex = position121, tokenIndex121
					}
					if !_rules[rulelist_content]() {
						goto l120
					}
					goto l119
				l120:
					position, tokenIndex = position120, tokenIndex120
				}
				if !_rules[ruleend]() {
					goto l117
				}
				add(ruleolist2, position118)
			}
			return true
		l117:
			position, tokenIndex = position117, tokenIndex117
			return false
		},
		/* 19 olist3 <- <('#' '#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if buffer[position] != rune('#') {
					goto l122
				}
				position++
				if buffer[position] != rune('#') {
					goto l122
				}
				position++
				if buffer[position] != rune('#') {
					goto l122
				}
				position++
				if buffer[position] != rune(' ') {
					goto l122
				}
				position++
			l124:
				{
					position125, tokenIndex125 := position, tokenIndex
					{
						position126, tokenIndex126 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l126
						}
						goto l125
					l126:
						position, tokenIndex = position126, tokenIndex126
					}
					if !_rules[rulelist_content]() {
						goto l125
					}
					goto l124
				l125:
					position, tokenIndex = position125, tokenIndex125
				}
				if !_rules[ruleend]() {
					goto l122
				}
				add(ruleolist3, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 20 olist4 <- <('#' '#' '#' '#' ' ' (!end list_content)* end)> */
		func() bool {
			position127, tokenIndex127 := position, tokenIndex
			{
				position128 := position
				if buffer[position] != rune('#') {
					goto l127
				}
				position++
				if buffer[position] != rune('#') {
					goto l127
				}
				position++
				if buffer[position] != rune('#') {
					goto l127
				}
				position++
				if buffer[position] != rune('#') {
					goto l127
				}
				position++
				if buffer[position] != rune(' ') {
					goto l127
				}
				position++
			l129:
				{
					position130, tokenIndex130 := position, tokenIndex
					{
						position131, tokenIndex131 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l131
						}
						goto l130
					l131:
						position, tokenIndex = position131, tokenIndex131
					}
					if !_rules[rulelist_content]() {
						goto l130
					}
					goto l129
				l130:
					position, tokenIndex = position130, tokenIndex130
				}
				if !_rules[ruleend]() {
					goto l127
				}
				add(ruleolist4, position128)
			}
			return true
		l127:
			position, tokenIndex = position127, tokenIndex127
			return false
		},
		/* 21 end <- <('\n' / ('\r' '\n'))> */
		func() bool {
			position132, tokenIndex132 := position, tokenIndex
			{
				position133 := position
				{
					position134, tokenIndex134 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l135
					}
					position++
					goto l134
				l135:
					position, tokenIndex = position134, tokenIndex134
					if buffer[position] != rune('\r') {
						goto l132
					}
					position++
					if buffer[position] != rune('\n') {
						goto l132
					}
					position++
				}
			l134:
				add(ruleend, position133)
			}
			return true
		l132:
			position, tokenIndex = position132, tokenIndex132
			return false
		},
		/* 22 wild <- <.> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if !matchDot() {
					goto l136
				}
				add(rulewild, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
