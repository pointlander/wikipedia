package wikipedia

// Code generated by peg wikipedia.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulewiki
	ruleelement
	rulefree
	rulecite
	rulelink
	ruletext
	ruleheading1
	ruleheading2
	ruleheading3
	ruleheading4
	ruleheading5
	ruleheading6
	rulehr
	rulebr
	rulelist_content
	rulelist
	rulel
	ruleulist1
	ruleulist2
	ruleulist3
	ruleulist4
	ruleolist1
	ruleolist2
	ruleolist3
	ruleolist4
	ruleend
	rulewild
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"wiki",
	"element",
	"free",
	"cite",
	"link",
	"text",
	"heading1",
	"heading2",
	"heading3",
	"heading4",
	"heading5",
	"heading6",
	"hr",
	"br",
	"list_content",
	"list",
	"l",
	"ulist1",
	"ulist2",
	"ulist3",
	"ulist4",
	"olist1",
	"olist2",
	"olist3",
	"olist4",
	"end",
	"wild",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Wikipedia struct {
	Buffer string
	buffer []rune
	rules  [29]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Wikipedia) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Wikipedia) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Wikipedia
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Wikipedia) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Wikipedia) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Wikipedia) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Wikipedia) error {
	return func(p *Wikipedia) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Wikipedia) Init(options ...func(*Wikipedia) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 wiki <- <element*> */
		func() bool {
			{
				position1 := position
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruleelement]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(rulewiki, position1)
			}
			return true
		},
		/* 1 element <- <(heading6 / heading5 / heading4 / heading3 / heading2 / heading1 / hr / br / list / free / cite / wild)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				{
					position6, tokenIndex6 := position, tokenIndex
					if !_rules[ruleheading6]() {
						goto l7
					}
					goto l6
				l7:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading5]() {
						goto l8
					}
					goto l6
				l8:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading4]() {
						goto l9
					}
					goto l6
				l9:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading3]() {
						goto l10
					}
					goto l6
				l10:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading2]() {
						goto l11
					}
					goto l6
				l11:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[ruleheading1]() {
						goto l12
					}
					goto l6
				l12:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulehr]() {
						goto l13
					}
					goto l6
				l13:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulebr]() {
						goto l14
					}
					goto l6
				l14:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulelist]() {
						goto l15
					}
					goto l6
				l15:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulefree]() {
						goto l16
					}
					goto l6
				l16:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulecite]() {
						goto l17
					}
					goto l6
				l17:
					position, tokenIndex = position6, tokenIndex6
					if !_rules[rulewild]() {
						goto l4
					}
				}
			l6:
				add(ruleelement, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 free <- <('[' '[' link ('|' text)? (']' ']'))> */
		func() bool {
			position18, tokenIndex18 := position, tokenIndex
			{
				position19 := position
				if buffer[position] != rune('[') {
					goto l18
				}
				position++
				if buffer[position] != rune('[') {
					goto l18
				}
				position++
				if !_rules[rulelink]() {
					goto l18
				}
				{
					position20, tokenIndex20 := position, tokenIndex
					if buffer[position] != rune('|') {
						goto l20
					}
					position++
					if !_rules[ruletext]() {
						goto l20
					}
					goto l21
				l20:
					position, tokenIndex = position20, tokenIndex20
				}
			l21:
				if buffer[position] != rune(']') {
					goto l18
				}
				position++
				if buffer[position] != rune(']') {
					goto l18
				}
				position++
				add(rulefree, position19)
			}
			return true
		l18:
			position, tokenIndex = position18, tokenIndex18
			return false
		},
		/* 3 cite <- <('<' 'r' 'e' 'f' '>' '{' '{' 'c' 'i' 't' 'e' ' ' (!'|' .)+ ('|' (!'=' .)+ '=' (!('|' / '}') .)+)* ('}' '}' '<' '/' 'r' 'e' 'f' '>'))> */
		func() bool {
			position22, tokenIndex22 := position, tokenIndex
			{
				position23 := position
				if buffer[position] != rune('<') {
					goto l22
				}
				position++
				if buffer[position] != rune('r') {
					goto l22
				}
				position++
				if buffer[position] != rune('e') {
					goto l22
				}
				position++
				if buffer[position] != rune('f') {
					goto l22
				}
				position++
				if buffer[position] != rune('>') {
					goto l22
				}
				position++
				if buffer[position] != rune('{') {
					goto l22
				}
				position++
				if buffer[position] != rune('{') {
					goto l22
				}
				position++
				if buffer[position] != rune('c') {
					goto l22
				}
				position++
				if buffer[position] != rune('i') {
					goto l22
				}
				position++
				if buffer[position] != rune('t') {
					goto l22
				}
				position++
				if buffer[position] != rune('e') {
					goto l22
				}
				position++
				if buffer[position] != rune(' ') {
					goto l22
				}
				position++
				{
					position26, tokenIndex26 := position, tokenIndex
					if buffer[position] != rune('|') {
						goto l26
					}
					position++
					goto l22
				l26:
					position, tokenIndex = position26, tokenIndex26
				}
				if !matchDot() {
					goto l22
				}
			l24:
				{
					position25, tokenIndex25 := position, tokenIndex
					{
						position27, tokenIndex27 := position, tokenIndex
						if buffer[position] != rune('|') {
							goto l27
						}
						position++
						goto l25
					l27:
						position, tokenIndex = position27, tokenIndex27
					}
					if !matchDot() {
						goto l25
					}
					goto l24
				l25:
					position, tokenIndex = position25, tokenIndex25
				}
			l28:
				{
					position29, tokenIndex29 := position, tokenIndex
					if buffer[position] != rune('|') {
						goto l29
					}
					position++
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l32
						}
						position++
						goto l29
					l32:
						position, tokenIndex = position32, tokenIndex32
					}
					if !matchDot() {
						goto l29
					}
				l30:
					{
						position31, tokenIndex31 := position, tokenIndex
						{
							position33, tokenIndex33 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l33
							}
							position++
							goto l31
						l33:
							position, tokenIndex = position33, tokenIndex33
						}
						if !matchDot() {
							goto l31
						}
						goto l30
					l31:
						position, tokenIndex = position31, tokenIndex31
					}
					if buffer[position] != rune('=') {
						goto l29
					}
					position++
					{
						position36, tokenIndex36 := position, tokenIndex
						{
							position37, tokenIndex37 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l38
							}
							position++
							goto l37
						l38:
							position, tokenIndex = position37, tokenIndex37
							if buffer[position] != rune('}') {
								goto l36
							}
							position++
						}
					l37:
						goto l29
					l36:
						position, tokenIndex = position36, tokenIndex36
					}
					if !matchDot() {
						goto l29
					}
				l34:
					{
						position35, tokenIndex35 := position, tokenIndex
						{
							position39, tokenIndex39 := position, tokenIndex
							{
								position40, tokenIndex40 := position, tokenIndex
								if buffer[position] != rune('|') {
									goto l41
								}
								position++
								goto l40
							l41:
								position, tokenIndex = position40, tokenIndex40
								if buffer[position] != rune('}') {
									goto l39
								}
								position++
							}
						l40:
							goto l35
						l39:
							position, tokenIndex = position39, tokenIndex39
						}
						if !matchDot() {
							goto l35
						}
						goto l34
					l35:
						position, tokenIndex = position35, tokenIndex35
					}
					goto l28
				l29:
					position, tokenIndex = position29, tokenIndex29
				}
				if buffer[position] != rune('}') {
					goto l22
				}
				position++
				if buffer[position] != rune('}') {
					goto l22
				}
				position++
				if buffer[position] != rune('<') {
					goto l22
				}
				position++
				if buffer[position] != rune('/') {
					goto l22
				}
				position++
				if buffer[position] != rune('r') {
					goto l22
				}
				position++
				if buffer[position] != rune('e') {
					goto l22
				}
				position++
				if buffer[position] != rune('f') {
					goto l22
				}
				position++
				if buffer[position] != rune('>') {
					goto l22
				}
				position++
				add(rulecite, position23)
			}
			return true
		l22:
			position, tokenIndex = position22, tokenIndex22
			return false
		},
		/* 4 link <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position43 := position
			l44:
				{
					position45, tokenIndex45 := position, tokenIndex
					{
						position46, tokenIndex46 := position, tokenIndex
						{
							position47, tokenIndex47 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l48
							}
							position++
							goto l47
						l48:
							position, tokenIndex = position47, tokenIndex47
							if buffer[position] != rune(']') {
								goto l46
							}
							position++
							if buffer[position] != rune(']') {
								goto l46
							}
							position++
						}
					l47:
						goto l45
					l46:
						position, tokenIndex = position46, tokenIndex46
					}
					if !matchDot() {
						goto l45
					}
					goto l44
				l45:
					position, tokenIndex = position45, tokenIndex45
				}
				add(rulelink, position43)
			}
			return true
		},
		/* 5 text <- <(!('|' / (']' ']')) .)*> */
		func() bool {
			{
				position50 := position
			l51:
				{
					position52, tokenIndex52 := position, tokenIndex
					{
						position53, tokenIndex53 := position, tokenIndex
						{
							position54, tokenIndex54 := position, tokenIndex
							if buffer[position] != rune('|') {
								goto l55
							}
							position++
							goto l54
						l55:
							position, tokenIndex = position54, tokenIndex54
							if buffer[position] != rune(']') {
								goto l53
							}
							position++
							if buffer[position] != rune(']') {
								goto l53
							}
							position++
						}
					l54:
						goto l52
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
					if !matchDot() {
						goto l52
					}
					goto l51
				l52:
					position, tokenIndex = position52, tokenIndex52
				}
				add(ruletext, position50)
			}
			return true
		},
		/* 6 heading1 <- <('=' <(!'=' .)+> '=' end)> */
		func() bool {
			position56, tokenIndex56 := position, tokenIndex
			{
				position57 := position
				if buffer[position] != rune('=') {
					goto l56
				}
				position++
				{
					position58 := position
					{
						position61, tokenIndex61 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l61
						}
						position++
						goto l56
					l61:
						position, tokenIndex = position61, tokenIndex61
					}
					if !matchDot() {
						goto l56
					}
				l59:
					{
						position60, tokenIndex60 := position, tokenIndex
						{
							position62, tokenIndex62 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l62
							}
							position++
							goto l60
						l62:
							position, tokenIndex = position62, tokenIndex62
						}
						if !matchDot() {
							goto l60
						}
						goto l59
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
					add(rulePegText, position58)
				}
				if buffer[position] != rune('=') {
					goto l56
				}
				position++
				if !_rules[ruleend]() {
					goto l56
				}
				add(ruleheading1, position57)
			}
			return true
		l56:
			position, tokenIndex = position56, tokenIndex56
			return false
		},
		/* 7 heading2 <- <('=' '=' <(!('=' '=') .)+> ('=' '=') end)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				{
					position65 := position
					{
						position68, tokenIndex68 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l68
						}
						position++
						if buffer[position] != rune('=') {
							goto l68
						}
						position++
						goto l63
					l68:
						position, tokenIndex = position68, tokenIndex68
					}
					if !matchDot() {
						goto l63
					}
				l66:
					{
						position67, tokenIndex67 := position, tokenIndex
						{
							position69, tokenIndex69 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l69
							}
							position++
							if buffer[position] != rune('=') {
								goto l69
							}
							position++
							goto l67
						l69:
							position, tokenIndex = position69, tokenIndex69
						}
						if !matchDot() {
							goto l67
						}
						goto l66
					l67:
						position, tokenIndex = position67, tokenIndex67
					}
					add(rulePegText, position65)
				}
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if buffer[position] != rune('=') {
					goto l63
				}
				position++
				if !_rules[ruleend]() {
					goto l63
				}
				add(ruleheading2, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 8 heading3 <- <('=' '=' '=' <(!('=' '=' '=') .)+> ('=' '=' '=') end)> */
		func() bool {
			position70, tokenIndex70 := position, tokenIndex
			{
				position71 := position
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				{
					position72 := position
					{
						position75, tokenIndex75 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l75
						}
						position++
						if buffer[position] != rune('=') {
							goto l75
						}
						position++
						if buffer[position] != rune('=') {
							goto l75
						}
						position++
						goto l70
					l75:
						position, tokenIndex = position75, tokenIndex75
					}
					if !matchDot() {
						goto l70
					}
				l73:
					{
						position74, tokenIndex74 := position, tokenIndex
						{
							position76, tokenIndex76 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l76
							}
							position++
							if buffer[position] != rune('=') {
								goto l76
							}
							position++
							if buffer[position] != rune('=') {
								goto l76
							}
							position++
							goto l74
						l76:
							position, tokenIndex = position76, tokenIndex76
						}
						if !matchDot() {
							goto l74
						}
						goto l73
					l74:
						position, tokenIndex = position74, tokenIndex74
					}
					add(rulePegText, position72)
				}
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				if buffer[position] != rune('=') {
					goto l70
				}
				position++
				if !_rules[ruleend]() {
					goto l70
				}
				add(ruleheading3, position71)
			}
			return true
		l70:
			position, tokenIndex = position70, tokenIndex70
			return false
		},
		/* 9 heading4 <- <('=' '=' '=' '=' <(!('=' '=' '=' '=') .)+> ('=' '=' '=' '=') end)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				{
					position79 := position
					{
						position82, tokenIndex82 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l82
						}
						position++
						if buffer[position] != rune('=') {
							goto l82
						}
						position++
						if buffer[position] != rune('=') {
							goto l82
						}
						position++
						if buffer[position] != rune('=') {
							goto l82
						}
						position++
						goto l77
					l82:
						position, tokenIndex = position82, tokenIndex82
					}
					if !matchDot() {
						goto l77
					}
				l80:
					{
						position81, tokenIndex81 := position, tokenIndex
						{
							position83, tokenIndex83 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l83
							}
							position++
							if buffer[position] != rune('=') {
								goto l83
							}
							position++
							if buffer[position] != rune('=') {
								goto l83
							}
							position++
							if buffer[position] != rune('=') {
								goto l83
							}
							position++
							goto l81
						l83:
							position, tokenIndex = position83, tokenIndex83
						}
						if !matchDot() {
							goto l81
						}
						goto l80
					l81:
						position, tokenIndex = position81, tokenIndex81
					}
					add(rulePegText, position79)
				}
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if buffer[position] != rune('=') {
					goto l77
				}
				position++
				if !_rules[ruleend]() {
					goto l77
				}
				add(ruleheading4, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 10 heading5 <- <('=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=') end)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				{
					position86 := position
					{
						position89, tokenIndex89 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l89
						}
						position++
						if buffer[position] != rune('=') {
							goto l89
						}
						position++
						if buffer[position] != rune('=') {
							goto l89
						}
						position++
						if buffer[position] != rune('=') {
							goto l89
						}
						position++
						if buffer[position] != rune('=') {
							goto l89
						}
						position++
						goto l84
					l89:
						position, tokenIndex = position89, tokenIndex89
					}
					if !matchDot() {
						goto l84
					}
				l87:
					{
						position88, tokenIndex88 := position, tokenIndex
						{
							position90, tokenIndex90 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l90
							}
							position++
							if buffer[position] != rune('=') {
								goto l90
							}
							position++
							if buffer[position] != rune('=') {
								goto l90
							}
							position++
							if buffer[position] != rune('=') {
								goto l90
							}
							position++
							if buffer[position] != rune('=') {
								goto l90
							}
							position++
							goto l88
						l90:
							position, tokenIndex = position90, tokenIndex90
						}
						if !matchDot() {
							goto l88
						}
						goto l87
					l88:
						position, tokenIndex = position88, tokenIndex88
					}
					add(rulePegText, position86)
				}
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if buffer[position] != rune('=') {
					goto l84
				}
				position++
				if !_rules[ruleend]() {
					goto l84
				}
				add(ruleheading5, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 11 heading6 <- <('=' '=' '=' '=' '=' '=' <(!('=' '=' '=' '=' '=' '=') .)+> ('=' '=' '=' '=' '=' '=') end)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				{
					position93 := position
					{
						position96, tokenIndex96 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						if buffer[position] != rune('=') {
							goto l96
						}
						position++
						goto l91
					l96:
						position, tokenIndex = position96, tokenIndex96
					}
					if !matchDot() {
						goto l91
					}
				l94:
					{
						position95, tokenIndex95 := position, tokenIndex
						{
							position97, tokenIndex97 := position, tokenIndex
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							if buffer[position] != rune('=') {
								goto l97
							}
							position++
							goto l95
						l97:
							position, tokenIndex = position97, tokenIndex97
						}
						if !matchDot() {
							goto l95
						}
						goto l94
					l95:
						position, tokenIndex = position95, tokenIndex95
					}
					add(rulePegText, position93)
				}
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if buffer[position] != rune('=') {
					goto l91
				}
				position++
				if !_rules[ruleend]() {
					goto l91
				}
				add(ruleheading6, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 12 hr <- <('-' '-' '-' '-' end)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if buffer[position] != rune('-') {
					goto l98
				}
				position++
				if buffer[position] != rune('-') {
					goto l98
				}
				position++
				if buffer[position] != rune('-') {
					goto l98
				}
				position++
				if buffer[position] != rune('-') {
					goto l98
				}
				position++
				if !_rules[ruleend]() {
					goto l98
				}
				add(rulehr, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 13 br <- <(end end)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				if !_rules[ruleend]() {
					goto l100
				}
				if !_rules[ruleend]() {
					goto l100
				}
				add(rulebr, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 14 list_content <- <(free / wild)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				{
					position104, tokenIndex104 := position, tokenIndex
					if !_rules[rulefree]() {
						goto l105
					}
					goto l104
				l105:
					position, tokenIndex = position104, tokenIndex104
					if !_rules[rulewild]() {
						goto l102
					}
				}
			l104:
				add(rulelist_content, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 15 list <- <(ulist4 / olist4 / ulist3 / olist3 / ulist2 / olist2 / ulist1 / olist1)+> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				{
					position110, tokenIndex110 := position, tokenIndex
					if !_rules[ruleulist4]() {
						goto l111
					}
					goto l110
				l111:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleolist4]() {
						goto l112
					}
					goto l110
				l112:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleulist3]() {
						goto l113
					}
					goto l110
				l113:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleolist3]() {
						goto l114
					}
					goto l110
				l114:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleulist2]() {
						goto l115
					}
					goto l110
				l115:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleolist2]() {
						goto l116
					}
					goto l110
				l116:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleulist1]() {
						goto l117
					}
					goto l110
				l117:
					position, tokenIndex = position110, tokenIndex110
					if !_rules[ruleolist1]() {
						goto l106
					}
				}
			l110:
			l108:
				{
					position109, tokenIndex109 := position, tokenIndex
					{
						position118, tokenIndex118 := position, tokenIndex
						if !_rules[ruleulist4]() {
							goto l119
						}
						goto l118
					l119:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleolist4]() {
							goto l120
						}
						goto l118
					l120:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleulist3]() {
							goto l121
						}
						goto l118
					l121:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleolist3]() {
							goto l122
						}
						goto l118
					l122:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleulist2]() {
							goto l123
						}
						goto l118
					l123:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleolist2]() {
							goto l124
						}
						goto l118
					l124:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleulist1]() {
							goto l125
						}
						goto l118
					l125:
						position, tokenIndex = position118, tokenIndex118
						if !_rules[ruleolist1]() {
							goto l109
						}
					}
				l118:
					goto l108
				l109:
					position, tokenIndex = position109, tokenIndex109
				}
				add(rulelist, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 16 l <- <('*' / '#')> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				{
					position128, tokenIndex128 := position, tokenIndex
					if buffer[position] != rune('*') {
						goto l129
					}
					position++
					goto l128
				l129:
					position, tokenIndex = position128, tokenIndex128
					if buffer[position] != rune('#') {
						goto l126
					}
					position++
				}
			l128:
				add(rulel, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 17 ulist1 <- <('*' ' ' (!end list_content)* end)> */
		func() bool {
			position130, tokenIndex130 := position, tokenIndex
			{
				position131 := position
				if buffer[position] != rune('*') {
					goto l130
				}
				position++
				if buffer[position] != rune(' ') {
					goto l130
				}
				position++
			l132:
				{
					position133, tokenIndex133 := position, tokenIndex
					{
						position134, tokenIndex134 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l134
						}
						goto l133
					l134:
						position, tokenIndex = position134, tokenIndex134
					}
					if !_rules[rulelist_content]() {
						goto l133
					}
					goto l132
				l133:
					position, tokenIndex = position133, tokenIndex133
				}
				if !_rules[ruleend]() {
					goto l130
				}
				add(ruleulist1, position131)
			}
			return true
		l130:
			position, tokenIndex = position130, tokenIndex130
			return false
		},
		/* 18 ulist2 <- <(l ('*' ' ') (!end list_content)* end)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if !_rules[rulel]() {
					goto l135
				}
				if buffer[position] != rune('*') {
					goto l135
				}
				position++
				if buffer[position] != rune(' ') {
					goto l135
				}
				position++
			l137:
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l139
						}
						goto l138
					l139:
						position, tokenIndex = position139, tokenIndex139
					}
					if !_rules[rulelist_content]() {
						goto l138
					}
					goto l137
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				if !_rules[ruleend]() {
					goto l135
				}
				add(ruleulist2, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 19 ulist3 <- <(l l ('*' ' ') (!end list_content)* end)> */
		func() bool {
			position140, tokenIndex140 := position, tokenIndex
			{
				position141 := position
				if !_rules[rulel]() {
					goto l140
				}
				if !_rules[rulel]() {
					goto l140
				}
				if buffer[position] != rune('*') {
					goto l140
				}
				position++
				if buffer[position] != rune(' ') {
					goto l140
				}
				position++
			l142:
				{
					position143, tokenIndex143 := position, tokenIndex
					{
						position144, tokenIndex144 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l144
						}
						goto l143
					l144:
						position, tokenIndex = position144, tokenIndex144
					}
					if !_rules[rulelist_content]() {
						goto l143
					}
					goto l142
				l143:
					position, tokenIndex = position143, tokenIndex143
				}
				if !_rules[ruleend]() {
					goto l140
				}
				add(ruleulist3, position141)
			}
			return true
		l140:
			position, tokenIndex = position140, tokenIndex140
			return false
		},
		/* 20 ulist4 <- <(l l l ('*' ' ') (!end list_content)* end)> */
		func() bool {
			position145, tokenIndex145 := position, tokenIndex
			{
				position146 := position
				if !_rules[rulel]() {
					goto l145
				}
				if !_rules[rulel]() {
					goto l145
				}
				if !_rules[rulel]() {
					goto l145
				}
				if buffer[position] != rune('*') {
					goto l145
				}
				position++
				if buffer[position] != rune(' ') {
					goto l145
				}
				position++
			l147:
				{
					position148, tokenIndex148 := position, tokenIndex
					{
						position149, tokenIndex149 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l149
						}
						goto l148
					l149:
						position, tokenIndex = position149, tokenIndex149
					}
					if !_rules[rulelist_content]() {
						goto l148
					}
					goto l147
				l148:
					position, tokenIndex = position148, tokenIndex148
				}
				if !_rules[ruleend]() {
					goto l145
				}
				add(ruleulist4, position146)
			}
			return true
		l145:
			position, tokenIndex = position145, tokenIndex145
			return false
		},
		/* 21 olist1 <- <('#' ' ' (!end list_content)* end)> */
		func() bool {
			position150, tokenIndex150 := position, tokenIndex
			{
				position151 := position
				if buffer[position] != rune('#') {
					goto l150
				}
				position++
				if buffer[position] != rune(' ') {
					goto l150
				}
				position++
			l152:
				{
					position153, tokenIndex153 := position, tokenIndex
					{
						position154, tokenIndex154 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l154
						}
						goto l153
					l154:
						position, tokenIndex = position154, tokenIndex154
					}
					if !_rules[rulelist_content]() {
						goto l153
					}
					goto l152
				l153:
					position, tokenIndex = position153, tokenIndex153
				}
				if !_rules[ruleend]() {
					goto l150
				}
				add(ruleolist1, position151)
			}
			return true
		l150:
			position, tokenIndex = position150, tokenIndex150
			return false
		},
		/* 22 olist2 <- <(l ('#' ' ') (!end list_content)* end)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if !_rules[rulel]() {
					goto l155
				}
				if buffer[position] != rune('#') {
					goto l155
				}
				position++
				if buffer[position] != rune(' ') {
					goto l155
				}
				position++
			l157:
				{
					position158, tokenIndex158 := position, tokenIndex
					{
						position159, tokenIndex159 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l159
						}
						goto l158
					l159:
						position, tokenIndex = position159, tokenIndex159
					}
					if !_rules[rulelist_content]() {
						goto l158
					}
					goto l157
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				if !_rules[ruleend]() {
					goto l155
				}
				add(ruleolist2, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 23 olist3 <- <(l l ('#' ' ') (!end list_content)* end)> */
		func() bool {
			position160, tokenIndex160 := position, tokenIndex
			{
				position161 := position
				if !_rules[rulel]() {
					goto l160
				}
				if !_rules[rulel]() {
					goto l160
				}
				if buffer[position] != rune('#') {
					goto l160
				}
				position++
				if buffer[position] != rune(' ') {
					goto l160
				}
				position++
			l162:
				{
					position163, tokenIndex163 := position, tokenIndex
					{
						position164, tokenIndex164 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l164
						}
						goto l163
					l164:
						position, tokenIndex = position164, tokenIndex164
					}
					if !_rules[rulelist_content]() {
						goto l163
					}
					goto l162
				l163:
					position, tokenIndex = position163, tokenIndex163
				}
				if !_rules[ruleend]() {
					goto l160
				}
				add(ruleolist3, position161)
			}
			return true
		l160:
			position, tokenIndex = position160, tokenIndex160
			return false
		},
		/* 24 olist4 <- <(l l l ('#' ' ') (!end list_content)* end)> */
		func() bool {
			position165, tokenIndex165 := position, tokenIndex
			{
				position166 := position
				if !_rules[rulel]() {
					goto l165
				}
				if !_rules[rulel]() {
					goto l165
				}
				if !_rules[rulel]() {
					goto l165
				}
				if buffer[position] != rune('#') {
					goto l165
				}
				position++
				if buffer[position] != rune(' ') {
					goto l165
				}
				position++
			l167:
				{
					position168, tokenIndex168 := position, tokenIndex
					{
						position169, tokenIndex169 := position, tokenIndex
						if !_rules[ruleend]() {
							goto l169
						}
						goto l168
					l169:
						position, tokenIndex = position169, tokenIndex169
					}
					if !_rules[rulelist_content]() {
						goto l168
					}
					goto l167
				l168:
					position, tokenIndex = position168, tokenIndex168
				}
				if !_rules[ruleend]() {
					goto l165
				}
				add(ruleolist4, position166)
			}
			return true
		l165:
			position, tokenIndex = position165, tokenIndex165
			return false
		},
		/* 25 end <- <('\n' / ('\r' '\n'))> */
		func() bool {
			position170, tokenIndex170 := position, tokenIndex
			{
				position171 := position
				{
					position172, tokenIndex172 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l173
					}
					position++
					goto l172
				l173:
					position, tokenIndex = position172, tokenIndex172
					if buffer[position] != rune('\r') {
						goto l170
					}
					position++
					if buffer[position] != rune('\n') {
						goto l170
					}
					position++
				}
			l172:
				add(ruleend, position171)
			}
			return true
		l170:
			position, tokenIndex = position170, tokenIndex170
			return false
		},
		/* 26 wild <- <.> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if !matchDot() {
					goto l174
				}
				add(rulewild, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
